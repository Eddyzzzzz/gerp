# Gerp: A Fast Indexed Search Tool

## Overview
Gerp is an efficient, indexed search tool that processes a directory, indexing each word for fast retrieval. Unlike traditional search tools, Gerp enables case-sensitive and case-insensitive searches while maintaining high performance using hash tables. This project demonstrates expertise in data structures, algorithm optimization, and systems programming.

## Features
- **Indexed Word Search**: Quickly finds and outputs all occurrences of a given word in indexed files.
- **Case-Sensitive & Case-Insensitive Modes**: Supports both exact case matching and lowercase normalization for flexible searching.
- **Efficient Hash Table Implementation**: Uses chaining to handle collisions and ensures fast lookup times.
- **Recursive Directory Traversal**: Indexes all files within a given directory structure.
- **Optimized Memory Management**: Expands dynamically while maintaining a load factor below 70%.
- **Comprehensive Testing**: Unit tests and diff-based validation ensure correctness and robustness.

---

## How It Works
1. **Indexing Phase**:
   - Recursively traverses the specified directory.
   - Reads each file line by line, extracting words and storing them in a hash table.
   - Creates a mapping between words and their line locations for quick lookup.

2. **Query Phase**:
   - Accepts search queries from users.
   - Retrieves matching lines from indexed data efficiently.
   - Outputs results to the specified file.

---

## Installation & Usage
### Compilation
```sh
make gerp
```

### Running the Program
```sh
./gerp DirectoryToIndex OutputFile
```
- `DirectoryToIndex`: Directory to scan and index.
- `OutputFile`: File where search results are stored.

---

## Data Structures
- **Hash Table**: Implemented with an array of buckets using linked list chaining.
- **Bucket**: Contains a linked list of Key-Value pairs.
- **Key-Value Pair**: Stores a word as the key and a list of line indices where the word appears.
- **Set**: Used to remove duplicate words in a line before inserting into the hash table.

---

## Algorithms
### Directory Parsing
- Uses **recursive traversal** to scan all subdirectories and files.
- Calls `ParseFile()` for each file.

### File Parsing (`ParseFile()` → `ParseLine()`)
- Reads each file line-by-line.
- Extracts words by stripping non-alphanumeric characters.
- Adds words to a **set** to remove duplicates.
- Stores words in **case-sensitive** and **lowercase hash tables**.
- Saves file path, line number, and content for quick retrieval.

### Hash Table Operations
- **Insertion**: Uses a **hash function** to determine bucket placement.
- **Collision Resolution**: Uses **chaining** via linked lists.
- **Expansion**: Doubles hash table size when the **load factor** exceeds 70%.
- **Querying**: Retrieves words efficiently using **O(1) average lookup time**.

---

## Testing
### Unit Testing
- Validates individual hash table operations.
- Ensures correct indexing and retrieval.

### Integration Testing
- Confirms Gerp correctly traverses directories and processes files.

### Diff-Based Validation
- Compares Gerp's output with `the_gerp` reference implementation.
- Uses sorting and `diff` for consistency checking.

### Performance Testing
- Runs **Valgrind** to detect memory leaks and inefficiencies.
- Benchmarks execution time on large text datasets.

---

## Comparison to `grep`
| Feature | `grep` | **Gerp** |
|---------|--------|---------|
| Real-time search | ✅ | ❌ (pre-indexed) |
| Indexed search | ❌ | ✅ |
| Case-insensitive search | ✅ | ✅ |
| Recursive directory traversal | ✅ | ✅ |
| Optimized for large datasets | ❌ | ✅ |

---

## Contributors
- **Duncan Johnson**
- **Eddy Zhang**

---

## Future Improvements
- **Multi-threading support** for faster indexing.
- **Compressed storage format** to reduce memory usage.
- **Improved query features** such as regex matching.

---
